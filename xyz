#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
//zad 1
void formatName(char* name) {
    if (name == NULL)
        return;

    // Konwersja na małe litery
    for (int i = 0; name[i]; i++){
        name[i] = tolower(name[i]);
    }

    // Konwersja pierwszej litery na dużą
    name[0] = toupper(name[0]);

    // Szukanie spacji i konwersja następującej po niej litery na dużą
    // Zmiana spacji na kropkę
    for (int i = 0; name[i]; i++){
        if (name[i] == ' '){
            name[i] = '.';
            name[i+1] = toupper(name[i+1]);
        }
    }
}
//zad 2
char* wstawWpomiedzyAB(char* str) {
    if(str == NULL) return NULL;

    int length = strlen(str);
    int count = 0;


    for(int i = 0; i < length-1; i++) {
        if((str[i] == 'a' && str[i+1] == 'b') || (str[i] == 'b' && str[i+1] == 'a')) {
            count++;
        }
    }


    char* newStr = malloc((length + count + 1) * sizeof(char));
    if(newStr == NULL) return NULL;

    int j = 0;
    for(int i = 0; i < length; i++) {
        if((str[i] == 'a' && str[i+1] == 'b') || (str[i] == 'b' && str[i+1] == 'a')) {
            newStr[j++] = str[i];
            newStr[j++] = 'W';
        } else {
            newStr[j++] = str[i];
        }
    }
    newStr[j] = '\0';
    return newStr;
}
//zad 3
int wymiar(int n, int matrix[n][n]) {
    int trace = 0;
    for(int i=0; i<n; i++) {
        trace += matrix[i][i];
    }
    return trace;
}

int sumBrzeg(int m, int n, int matrix[m][n]) {
    int sum = 0;
    for(int i=0; i<m; i++) {
        for(int j=0; j<n; j++) {
            if(i == 0 || i == m-1 || j == 0 || j == n-1) {
                if(matrix[i][j] % 2 == 0) {
                    sum += matrix[i][j];
                }
            }
        }
    }
    return sum;
}
//zad 4
void reverseColumns(int arr[][3], int rows, int cols) {
    for (int j = 0; j < cols; j++) {
        int start = 0;
        int end = rows - 1;

        while (start < end) {
            int temp = arr[start][j];
            arr[start][j] = arr[end][j];
            arr[end][j] = temp;

            start++;
            end--;
        }
    }
}

void shiftColumns(int arr[][3], int rows, int cols) {
    int temp[rows][cols];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            int shiftedCol = (j + 2) % cols;
            temp[i][shiftedCol] = arr[i][j];
        }
    }

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            arr[i][j] = temp[i][j];
        }
    }
}

void printArray(int arr[][3], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", arr[i][j]);
        }
        printf("\n");
    }
}
//zad 5
struct Node {
    int data;
    struct Node* next;
};

void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *head;
    *head = newNode;
}

struct Node* getAlternateList(struct Node* head) {
    struct Node* alternateList = NULL;
    struct Node* tail = NULL;

    for (int count = 1; head != NULL; count++) {
        if (count % 2 == 1) {
            insertNode(&alternateList, head->data);
            if (tail == NULL) {
                tail = alternateList;
            }
        }
        head = head->next;
    }

    if (tail != NULL) {
        tail->next = NULL;
    }

    return alternateList;
}

void printList(struct Node* head) {
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

void freeList(struct Node** head) {
    struct Node* temp;
    while (*head != NULL) {
        temp = *head;
        *head = (*head)->next;
        free(temp);
    }
}
//zad 6
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
void deleteMiddleElement(struct Node** head) {
    if (*head == NULL) {
        return;
    }

    struct Node* slowPtr = *head;
    struct Node* fastPtr = *head;
    struct Node* prevNode = NULL;

    while (fastPtr != NULL && fastPtr->next != NULL) {
        fastPtr = fastPtr->next->next;
        prevNode = slowPtr;
        slowPtr = slowPtr->next;
    }

    if (prevNode != NULL) {
        prevNode->next = slowPtr->next;
    } else {
        *head = slowPtr->next;
    }

    free(slowPtr);
}
int main() {
    //zad 1
    char name[] = "JAKUB BUDZICH";
    formatName(name);
    printf("%s\n", name);
    //zad 2
    char str[] = "doba, abazur, baba , baobab";
    char* newStr = wstawWpomiedzyAB(str);
    printf("%s\n", newStr);
    free(newStr);
    //zad 3
    int matrix1[3][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
    printf("wymiar tablicy: %d\n", wymiar(3, matrix1));

    int matrix2[4][5] = { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}, {16, 17, 18, 19, 20} };
    printf("suma parzystych: %d\n", sumBrzeg(4, 5, matrix2));

    //zad 4
    int arr1[][3] = {{1, 2, 3},
                     {4, 5, 6},
                     {7, 8, 9}};


    printArray(arr1, 3, 3);

    reverseColumns(arr1, 3, 3);

    printf("\nPo odwróceniu kolumn:\n");
    printArray(arr1, 3, 3);

    int arr2[][3] = {{1, 2, 3},
                     {4, 5, 6},
                     {7, 8, 9}};

    printf("\nPrzed przesunięciem kolumn:\n");
    printArray(arr2, 3, 3);

    shiftColumns(arr2, 3, 3);

    printf("\nPo przesunięciu kolumn:\n");
    printArray(arr2, 3, 3);
    //zad 5
    struct Node* head = NULL;

    // Dodaj przykładowe elementy do listy
    insertNode(&head, 2);
    insertNode(&head, 7);
    insertNode(&head, 8);
    insertNode(&head, 5);
    insertNode(&head, 1);

    printf("Oryginalna lista: ");
    printList(head);

    struct Node* alternateList = getAlternateList(head);

    printf("Lista składająca się z co drugiego elementu: ");
    printList(alternateList);

    freeList(&head);
    freeList(&alternateList);
    //zad6
    struct Node* head1 = NULL;

    // Dodaj przykładowe elementy do listy
    insertNode(&head1, 6);
    insertNode(&head1, 1);
    insertNode(&head1, 9);
    insertNode(&head1, 8);
    insertNode(&head1, 5);

    printf("Oryginalna lista: ");
    printList(head1);

    deleteMiddleElement(&head1);

    printf("Lista po usunięciu środkowego elementu: ");
    printList(head1);

    freeList(&head1);
    return 0;
}


Zadanie 3(dziala cale)
#include <stdio.h>

void uzupelnij(int n, int tablica[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == 0 || i == n - 1 || j == 0 || j == n - 1) {
                tablica[i][j] = 0;
            } else {
                tablica[i][j] = 1;
            }
        }
    }
}

void drukuj(int n, int tablica[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", tablica[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int n = 4;
    int tablica[n][n];

    uzupelnij(n, tablica);
    drukuj(n, tablica);

    return 0;
}


#include <stdio.h>
#include <stdlib.h>
//zad 1
void usun_m(char* tablica) {
    if (tablica == NULL)
        return;

    int i, j;
    for (i = 0, j = 0; tablica[i] != '\0'; i++) {
        if (tablica[i] != 'm') {
            tablica[j] = tablica[i];
            j++;
        }
    }
    tablica[j] = '\0';
}
int main() {
    char tablica[] = "marmolada";
    printf("Przed: %s\n", tablica);
    usun_m(tablica);
    printf("Po: %s\n", tablica);
    return 0;
}
//zad2
int licz_samogloski(const char* tablica) {
    if (tablica == NULL)
        return 0;
    int licznik = 0;
    int i;
    char znak;

    for (i = 0; tablica[i] != '\0'; i++) {
        znak = tablica[i];
        if (znak == 'a' || znak == 'o' || znak == 'e' || znak == 'i' || znak == 'u' || znak == 'y') {
            licznik++;
        }
    }
    return licznik;
}
int main() {
    char tablica[] = "master";
    int liczba_samoglosek = licz_samogloski(tablica);
    printf("Liczba samoglosek: %d\n", liczba_samoglosek);
    return 0;
}
//zad2
int licz_samogloski(const char* tablica) {
    if (tablica == NULL)
        return 0;
    int licznik = 0;
    int i;
    char znak;

    for (i = 0; tablica[i] != '\0'; i++) {
        znak = tablica[i];
        if (znak == 'a' || znak == 'o' || znak == 'e' || znak == 'i' || znak == 'u' || znak == 'y') {
            licznik++;
        }
    }
    return licznik;
}
int main() {
    char tablica[] = "master";
    int liczba_samoglosek = licz_samogloski(tablica);
    printf("Liczba samoglosek: %d\n", liczba_samoglosek);
    return 0;
}
//zad 3
void uzupelnij_tablice(int n, int tab[n][n]) {
    if (n <= 0)
        return;
    int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (i == 0 || i == n - 1 || j == 0 || j == n - 1) {
                // Uzupełnienie brzegu zerami
                tab[i][j] = 0;
            } else {
                // Uzupełnienie środka jedynkami
                tab[i][j] = 1;
            }
        }
    }
}
void wyswietl_tablice(int n, int tab[n][n]) {
    int i, j;

    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("%d ", tab[i][j]);
        }
        printf("\n");
    }
}
int main() {
    int n = 4;
    int tablica[n][n];
    uzupelnij_tablice(n, tablica);
    wyswietl_tablice(n, tablica);
    return 0;
}
//zad 4
void zamien_wiersze(int** tab, int n, int m) {
    if (n <= 1)
        return;

    int i, j;
    int* temp;

    for (i = 0; i < n - 1; i += 2) {
        temp = tab[i];
        tab[i] = tab[i + 1];
        tab[i + 1] = temp;
    }
}
void wyswietl_tablice(int** tab, int n, int m) {
    int i, j;

    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            printf("%d ", tab[i][j]);
        }
        printf("\n");
    }
}
int main() {
    int n = 5;
    int m = 3;

    int** tablica = (int**)malloc(n * sizeof(int*));
    int i, j;
    for (i = 0; i < n; i++) {
        tablica[i] = (int*)malloc(m * sizeof(int));
        for (j = 0; j < m; j++) {
            tablica[i][j] = i * m + j + 1;
        }
    }
    printf("Przed zamianą:\n");
    wyswietl_tablice(tablica, n, m);
    zamien_wiersze(tablica, n, m);
    printf("Po zamianie:\n");
    wyswietl_tablice(tablica, n, m);
    for (i = 0; i < n; i++) {
        free(tablica[i]);
    }
    free(tablica);

    return 0;
}
//zad5
typedef struct Node {
    int data;
    struct Node* next;
} Node;
float srednia_arytmetyczna(Node* head) {
    if (head == NULL)
        return 0.0;

    int suma = 0;
    int licznik = 0;

    Node* current = head;
    while (current != NULL) {
        suma += current->data;
        licznik++;
        current = current->next;
    }

    if (licznik == 0)
        return 0.0;

    return (float)suma / licznik;
}
void dodaj_element(Node** head, int liczba) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->data = liczba;
    new_node->next = NULL;

    if (*head == NULL) {
        *head = new_node;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = new_node;
    }
}
void zwolnij_liste(Node* head) {
    Node* current = head;
    Node* next;

    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }
}
int main() {
    Node* lista = NULL;
    dodaj_element(&lista, 10);
    dodaj_element(&lista, 20);
    dodaj_element(&lista, 30);
    float srednia = srednia_arytmetyczna(lista);
    printf("Srednia arytmetyczna: %.2f\n", srednia);
    zwolnij_liste(lista);
    return 0;
}
//zad 6
typedef struct Node {
    int data;
    struct Node* next;
} Node;
void usun_elementy(Node** head) {
    if (*head == NULL)
        return;
    Node* current = *head;
    Node* previous = NULL;
    
    while (current != NULL) {
        if (current->data == 4) {
            if (previous == NULL) {
                // Usunięcie pierwszego elementu
                *head = current->next;
                free(current);
                current = *head;
            } else {
                // Usunięcie elementu w środku lub na końcu
                previous->next = current->next;
                free(current);
                current = previous->next;
            }
        } else {
            // Przejście do następnego elementu
            previous = current;
            current = current->next;
        }
    }
}
void dodaj_element(Node** head, int liczba) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->data = liczba;
    new_node->next = NULL;
    
    if (*head == NULL) {
        *head = new_node;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = new_node;
    }
}
void zwolnij_liste(Node* head) {
    Node* current = head;
    Node* next;
    
    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }
}
void wyswietl_liste(Node* head) {
    Node* current = head;
    
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}
int main() {
    Node* lista = NULL;
    dodaj_element(&lista, 1);
    dodaj_element(&lista, 6);
    dodaj_element(&lista, 4);
    dodaj_element(&lista, 7);
    dodaj_element(&lista, 5);
    dodaj_element(&lista, 4);
    dodaj_element(&lista, 9);
    dodaj_element(&lista, 1);
    dodaj_element(&lista, 2);
    dodaj_element(&lista, 4);
    printf("Przed usunięciem: ");
    wyswietl_liste(lista);
    usun_elementy(&lista);
    printf("Po usunięciu: ");
    wyswietl_liste(lista);
    zwolnij_liste(lista);
    return 0;
}
