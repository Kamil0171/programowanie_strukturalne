Zad 1 Rozważmy napis w formie danych osobowych składających się z imienia i nazwiska pisanych dużymi literami oddzielonych spacją. KAMIL NOWAK. Napisać funkcję, która zwraca napis o jednym argumencie będącym napisem. Funkcja modyfikuje napis z argumentu zmieniając go do formatu, w którym imię jest oddzielone od nazwiska kropką oraz tylko pierwsze ich litery są duże. Wynikiem dla podanego przykładu będzie Kamil.Nowak.

#include <stdio.h>
#include <ctype.h>

void formatujDaneOsobowe(char* daneOsobowe) {
    // Zmienia pierwsze litery imienia i nazwiska na duże litery
    for (int i = 0; daneOsobowe[i] != '\0'; i++) {
        if (i == 0 || daneOsobowe[i-1] == ' ') {
            daneOsobowe[i] = toupper(daneOsobowe[i]);
        } else {
            daneOsobowe[i] = tolower(daneOsobowe[i]);
        }
    }

    // Zamienia spację na kropkę między imieniem i nazwiskiem
    for (int i = 0; daneOsobowe[i] != '\0'; i++) {
        if (daneOsobowe[i] == ' ') {
            daneOsobowe[i] = '.';
            break;
        }
    }
}

int main() {
    char daneOsobowe[] = "KAMIL NOWAK";
    formatujDaneOsobowe(daneOsobowe);
    printf("%s\n", daneOsobowe);
    return 0;
}

Zad 2
Napisać funkcję, która zwraca napis o jednym argumencie będącym napisem. Funkcja modyfikuje napis z argumentu w taki sposób, że jeśli małe litery a i b stoją w nim obok siebie to oddziela je dużą literą W wstawiając ją pomiędzy. Czynność tą wykonuje dla każdego takiego wystąpienia.
Np. dla napisu doba, zwrócony ma zostać dobWa;
Np. dla napisu abazur, zwrócony ma zostać aWbWazur;
Np. dla napisu baba, zwrócony ma zostać bWaWbWa;
Np. dla napisu baobab, zwrócony ma zostać bWaobWaWb;

#include <stdio.h>
#include <string.h>

void modifyString(char* input) {
    int length = strlen(input);
    int newSize = length * 2 + 1; // Nowy rozmiar napisu (z uwzględnieniem dodanych liter 'W' i zakończenia '\0')
    char result[newSize]; // Nowy napis wynikowy

    int j = 0; // Indeks dla napisu wynikowego

    for (int i = 0; i < length; i++) {
        // Dodawanie oryginalnej litery do napisu wynikowego
        result[j++] = input[i];

        // Sprawdzanie warunku wystąpienia małych liter obok siebie
        if (i < length - 1 && input[i] >= 'a' && input[i] <= 'z' && input[i + 1] >= 'a' && input[i + 1] <= 'z') {
            // Dodawanie dużej litery 'W' do napisu wynikowego
            result[j++] = 'W';
        }
    }

    // Dodanie zakończenia napisu
    result[j] = '\0';

    // Kopiowanie napisu wynikowego z powrotem do napisu wejściowego
    strcpy(input, result);
}

int main() {
    char input[] = "baobab";
    printf("Przed: %s\n", input);
    modifyString(input);
    printf("Po: %s\n", input);

    return 0;
}

Zad 3
a) Napisz funkcję, która otrzymuje w argumencie kwadratową tablicę elementów typu int oraz jej wymiar i zwraca ślad przekazanej w argumencie macierzy. Ślad to suma elementów na głównej przekątnej macierzy.
b) Napisz funkcję, która otrzymuje w argumencie dodatnie liczby całkowite m i n oraz dwuwymiarową tablicę tablic elementów typu int. Funkcja ma obliczyć sumę wszystkich elementów parzystych macierzy przekazanej w argumencie, znajdujących się na jej brzegu, to jest w pierwszym lub ostatnim wierszu lub pierwszej lub ostatniej kolumnie.
a)
#include <stdio.h>

int trace(int matrix[][100], int size) {
    int i, sum = 0;
    
    for (i = 0; i < size; i++) {
        sum += matrix[i][i];
    }
    
    return sum;
}

int main() {
    int matrix[100][100];
    int size, i, j;
    
    printf("Podaj wymiar macierzy kwadratowej: ");
    scanf("%d", &size);
    
    printf("Podaj elementy macierzy:\n");
    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
    
    int result = trace(matrix, size);
    
    printf("Ślad macierzy: %d\n", result);
    
    return 0;
}
b)
#include <stdio.h>

int sumOnBorder(int matrix[][100], int m, int n) {
    int i, j, sum = 0;
    
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            if (i == 0 || i == m - 1 || j == 0 || j == n - 1) {
                if (matrix[i][j] % 2 == 0) {
                    sum += matrix[i][j];
                }
            }
        }
    }
    
    return sum;
}

int main() {
    int matrix[100][100];
    int m, n, i, j;
    
    printf("Podaj liczbę wierszy macierzy: ");
    scanf("%d", &m);
    
    printf("Podaj liczbę kolumn macierzy: ");
    scanf("%d", &n);
    
    printf("Podaj elementy macierzy:\n");
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
    
    int result = sumOnBorder(matrix, m, n);
    
    printf("Suma elementów parzystych na brzegu macierzy: %d\n", result);
    
    return 0;
}

Zad 4
a) Napisać funkcję, która dostaje jako argumenty tablicę dwuwymiarową o elementach typu int oraz jej wymiary i odwraca kolejność we wszystkich kolumnach otrzymanej tablicy.
b) Napisz funkcję, która dostaje jako argumenty tablicę dwuwymiarową o elementach typu int oraz jej wymiary i zmienia kolejność kolumn przesuwając je o dwa w prawo w tablicy w taki sposób, że kolumna pierwsza ma się znaleźć na miejscu trzeciej, kolumna druga na miejscu czwartej itd., natomiast ostatnia kolumna ma się znaleźć na miejscu drugiej, a przedostatnia na miejscu pierwszej

#include <stdio.h>

void odwrocKolumny(int tablica[][5], int wiersze, int kolumny) {
    for (int j = 0; j < kolumny; j++) {
        int i = 0;
        int k = wiersze - 1;
        while (i < k) {
            int temp = tablica[i][j];
            tablica[i][j] = tablica[k][j];
            tablica[k][j] = temp;
            i++;
            k--;
        }
    }
}

void przesunKolumny(int tablica[][5], int wiersze, int kolumny) {
    int temp[kolumny];
    for (int i = 0; i < wiersze; i++) {
        for (int j = 0; j < kolumny; j++) {
            temp[(j + 2) % kolumny] = tablica[i][j];
        }
        for (int j = 0; j < kolumny; j++) {
            tablica[i][j] = temp[j];
        }
    }
}

void wyswietlTablice(int tablica[][5], int wiersze, int kolumny) {
    for (int i = 0; i < wiersze; i++) {
        for (int j = 0; j < kolumny; j++) {
            printf("%d ", tablica[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

int main() {
    int tablica[4][5] = {
        {1, 2, 3, 4, 5},
        {6, 7, 8, 9, 10},
        {11, 12, 13, 14, 15},
        {16, 17, 18, 19, 20}
    };

    printf("Tablica przed odwróceniem kolumn:\n");
    wyswietlTablice(tablica, 4, 5);

    odwrocKolumny(tablica, 4, 5);

    printf("Tablica po odwróceniu kolumn:\n");
    wyswietlTablice(tablica, 4, 5);

    printf("Tablica przed przesunięciem kolumn:\n");
    wyswietlTablice(tablica, 4, 5);

    przesunKolumny(tablica, 4, 5);

    printf("Tablica po przesunięciu kolumn:\n");
    wyswietlTablice(tablica, 4, 5);

    return 0;
}
================
#include <stdio.h>

void reverseColumns(int arr[][3], int rows, int cols) {
    for (int j = 0; j < cols; j++) {
        int start = 0;
        int end = rows - 1;
        while (start < end) {
            int temp = arr[start][j];
            arr[start][j] = arr[end][j];
            arr[end][j] = temp;
            start++;
            end--;
        }
    }
}

void shiftColumns(int arr[][4], int rows, int cols) {
    for (int j = 0; j < cols / 2; j++) {
        for (int i = 0; i < rows; i++) {
            int temp = arr[i][j];
            arr[i][j] = arr[i][cols - j - 1];
            arr[i][cols - j - 1] = temp;
        }
    }
}

void printArray(int arr[][4], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", arr[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int arr1[][3] = {{1, 2, 3},
                     {4, 5, 6},
                     {7, 8, 9}};

    int arr2[][4] = {{1, 2, 3, 4},
                     {5, 6, 7, 8},
                     {9, 10, 11, 12}};

    int rows1 = sizeof(arr1) / sizeof(arr1[0]);
    int cols1 = sizeof(arr1[0]) / sizeof(arr1[0][0]);

    int rows2 = sizeof(arr2) / sizeof(arr2[0]);
    int cols2 = sizeof(arr2[0]) / sizeof(arr2[0][0]);

    printf("Original Array 1:\n");
    printArray(arr1, rows1, cols1);

    reverseColumns(arr1, rows1, cols1);

    printf("\nArray 1 after reversing columns:\n");
    printArray(arr1, rows1, cols1);

    printf("\nOriginal Array 2:\n");
    printArray(arr2, rows2, cols2);

    shiftColumns(arr2, rows2, cols2);

    printf("\nArray 2 after shifting columns to the left by 2 positions:\n");
    printArray(arr2, rows2, cols2);

    return 0;
}

Zad 5
Napisz program, który działa na liście modyfikując ją w taki sposób, że zwraca listę , składającą się z co drugiego elementu wyjściowej listy, licząc od pierwszego jej elementu; np. dla listy o elementach 1 5 8 7 2, zwraca listę 1 8 2. Zwolnij niewykorzystaną pamięć.

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void addNode(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}

void freeList(Node** head) {
    Node* current = *head;
    Node* next;
    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }
    *head = NULL;
}

Node* getAlternateList(Node* head) {
    Node* result = NULL;
    Node* current = head;
    int count = 1;
    while (current != NULL) {
        if (count % 2 == 1) {
            addNode(&result, current->data);
        }
        current = current->next;
        count++;
    }
    return result;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    Node* head = NULL;
    addNode(&head, 1);
    addNode(&head, 5);
    addNode(&head, 8);
    addNode(&head, 7);
    addNode(&head, 2);

    printf("Original List: ");
    printList(head);

    Node* alternateList = getAlternateList(head);
    printf("Modified List: ");
    printList(alternateList);

    freeList(&head);
    freeList(&alternateList);

    return 0;
}

Zad 6
Napisz program, który działa na liście modyfikując ją w taki sposób, że zwraca listę z usunięciem środkowego elementu bądź elementów. W przypadku gdy liczba elementów listy jest parzysta, należy wyrzucić z niej dwa środkowe elementy, w przeciwnym razie jeden; np. dla listy 5 8 9 1 6, program zwraca 5 8 1 6, a dla listy 1 6 7 5 4 9 program zwraca 1 6 4 9. Zwolnij niewykorzystaną pamięć

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

void insert(Node** head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void deleteMiddleElement(Node** head) {
    if (*head == NULL || (*head)->next == NULL) {
        return;
    }

    Node* slowPtr = *head;
    Node* fastPtr = *head;
    Node* prev = NULL;

    while (fastPtr != NULL && fastPtr->next != NULL) {
        fastPtr = fastPtr->next->next;
        prev = slowPtr;
        slowPtr = slowPtr->next;
    }

    if (prev != NULL) {
        prev->next = slowPtr->next;
    } else {
        *head = slowPtr->next;
    }

    free(slowPtr);
}

void freeList(Node** head) {
    Node* current = *head;
    Node* next;

    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }

    *head = NULL;
}

void printList(Node* head) {
    Node* current = head;

    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }

    printf("\n");
}

int main() {
    Node* head = NULL;
    int n, data;

    printf("Podaj liczbe elementow: ");
    scanf("%d", &n);

    printf("Podaj elementy listy:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        insert(&head, data);
    }

    printf("Lista przed modyfikacja: ");
    printList(head);

    deleteMiddleElement(&head);

    printf("Lista po modyfikacji: ");
    printList(head);

    freeList(&head);

    return 0;
}
